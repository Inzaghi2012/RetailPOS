//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace RetailPOS.PersistenceLayer.Repository.Entities
{
    public partial class customer : EntityBase
    {
        #region Primitive Properties
    
        public virtual int id
        {
            get;
            set;
        }
    
        public virtual string code
        {
            get;
            set;
        }
    
        public virtual Nullable<short> type_id
        {
            get { return _type_id; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_type_id != value)
                    {
                        if (customer_type != null && customer_type.id != value)
                        {
                            customer_type = null;
                        }
                        _type_id = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<short> _type_id;
    
        public virtual string last_name
        {
            get;
            set;
        }
    
        public virtual string first_name
        {
            get;
            set;
        }
    
        public virtual string phone
        {
            get;
            set;
        }
    
        public virtual string mobile
        {
            get;
            set;
        }
    
        public virtual string email
        {
            get;
            set;
        }
    
        public virtual string openid_id
        {
            get;
            set;
        }
    
        public virtual Nullable<short> openid_server_id
        {
            get { return _openid_server_id; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_openid_server_id != value)
                    {
                        if (openid_server != null && openid_server.id != value)
                        {
                            openid_server = null;
                        }
                        _openid_server_id = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<short> _openid_server_id;
    
        public virtual string password
        {
            get;
            set;
        }
    
        public virtual short status_id
        {
            get { return _status_id; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_status_id != value)
                    {
                        if (customer_status != null && customer_status.id != value)
                        {
                            customer_status = null;
                        }
                        _status_id = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private short _status_id;
    
        public virtual decimal credit_limit
        {
            get;
            set;
        }
    
        public virtual short payment_period
        {
            get;
            set;
        }
    
        public virtual string image_path
        {
            get;
            set;
        }
    
        public virtual Nullable<long> address_id
        {
            get { return _address_id; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_address_id != value)
                    {
                        if (address != null && address.id != value)
                        {
                            address = null;
                        }
                        _address_id = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<long> _address_id;

        #endregion
        #region Navigation Properties
    
        public virtual address address
        {
            get { return _address; }
            set
            {
                if (!ReferenceEquals(_address, value))
                {
                    var previousValue = _address;
                    _address = value;
                    Fixupaddress(previousValue);
                }
            }
        }
        private address _address;
    
        public virtual customer_type customer_type
        {
            get { return _customer_type; }
            set
            {
                if (!ReferenceEquals(_customer_type, value))
                {
                    var previousValue = _customer_type;
                    _customer_type = value;
                    Fixupcustomer_type(previousValue);
                }
            }
        }
        private customer_type _customer_type;
    
        public virtual customer_status customer_status
        {
            get { return _customer_status; }
            set
            {
                if (!ReferenceEquals(_customer_status, value))
                {
                    var previousValue = _customer_status;
                    _customer_status = value;
                    Fixupcustomer_status(previousValue);
                }
            }
        }
        private customer_status _customer_status;
    
        public virtual openid_server openid_server
        {
            get { return _openid_server; }
            set
            {
                if (!ReferenceEquals(_openid_server, value))
                {
                    var previousValue = _openid_server;
                    _openid_server = value;
                    Fixupopenid_server(previousValue);
                }
            }
        }
        private openid_server _openid_server;
    
        public virtual ICollection<customer_pay_history> customer_pay_history
        {
            get
            {
                if (_customer_pay_history == null)
                {
                    var newCollection = new FixupCollection<customer_pay_history>();
                    newCollection.CollectionChanged += Fixupcustomer_pay_history;
                    _customer_pay_history = newCollection;
                }
                return _customer_pay_history;
            }
            set
            {
                if (!ReferenceEquals(_customer_pay_history, value))
                {
                    var previousValue = _customer_pay_history as FixupCollection<customer_pay_history>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixupcustomer_pay_history;
                    }
                    _customer_pay_history = value;
                    var newValue = value as FixupCollection<customer_pay_history>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixupcustomer_pay_history;
                    }
                }
            }
        }
        private ICollection<customer_pay_history> _customer_pay_history;
    
        public virtual ICollection<email_history> email_history
        {
            get
            {
                if (_email_history == null)
                {
                    var newCollection = new FixupCollection<email_history>();
                    newCollection.CollectionChanged += Fixupemail_history;
                    _email_history = newCollection;
                }
                return _email_history;
            }
            set
            {
                if (!ReferenceEquals(_email_history, value))
                {
                    var previousValue = _email_history as FixupCollection<email_history>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixupemail_history;
                    }
                    _email_history = value;
                    var newValue = value as FixupCollection<email_history>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixupemail_history;
                    }
                }
            }
        }
        private ICollection<email_history> _email_history;
    
        public virtual ICollection<login_history> login_history
        {
            get
            {
                if (_login_history == null)
                {
                    var newCollection = new FixupCollection<login_history>();
                    newCollection.CollectionChanged += Fixuplogin_history;
                    _login_history = newCollection;
                }
                return _login_history;
            }
            set
            {
                if (!ReferenceEquals(_login_history, value))
                {
                    var previousValue = _login_history as FixupCollection<login_history>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixuplogin_history;
                    }
                    _login_history = value;
                    var newValue = value as FixupCollection<login_history>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixuplogin_history;
                    }
                }
            }
        }
        private ICollection<login_history> _login_history;
    
        public virtual ICollection<ordermaster> ordermasters
        {
            get
            {
                if (_ordermasters == null)
                {
                    var newCollection = new FixupCollection<ordermaster>();
                    newCollection.CollectionChanged += Fixupordermasters;
                    _ordermasters = newCollection;
                }
                return _ordermasters;
            }
            set
            {
                if (!ReferenceEquals(_ordermasters, value))
                {
                    var previousValue = _ordermasters as FixupCollection<ordermaster>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixupordermasters;
                    }
                    _ordermasters = value;
                    var newValue = value as FixupCollection<ordermaster>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixupordermasters;
                    }
                }
            }
        }
        private ICollection<ordermaster> _ordermasters;

        #endregion
        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void Fixupaddress(address previousValue)
        {
            if (previousValue != null && previousValue.customers.Contains(this))
            {
                previousValue.customers.Remove(this);
            }
    
            if (address != null)
            {
                if (!address.customers.Contains(this))
                {
                    address.customers.Add(this);
                }
                if (address_id != address.id)
                {
                    address_id = address.id;
                }
            }
            else if (!_settingFK)
            {
                address_id = null;
            }
        }
    
        private void Fixupcustomer_type(customer_type previousValue)
        {
            if (previousValue != null && previousValue.customers.Contains(this))
            {
                previousValue.customers.Remove(this);
            }
    
            if (customer_type != null)
            {
                if (!customer_type.customers.Contains(this))
                {
                    customer_type.customers.Add(this);
                }
                if (type_id != customer_type.id)
                {
                    type_id = customer_type.id;
                }
            }
            else if (!_settingFK)
            {
                type_id = null;
            }
        }
    
        private void Fixupcustomer_status(customer_status previousValue)
        {
            if (previousValue != null && previousValue.customers.Contains(this))
            {
                previousValue.customers.Remove(this);
            }
    
            if (customer_status != null)
            {
                if (!customer_status.customers.Contains(this))
                {
                    customer_status.customers.Add(this);
                }
                if (status_id != customer_status.id)
                {
                    status_id = customer_status.id;
                }
            }
        }
    
        private void Fixupopenid_server(openid_server previousValue)
        {
            if (previousValue != null && previousValue.customers.Contains(this))
            {
                previousValue.customers.Remove(this);
            }
    
            if (openid_server != null)
            {
                if (!openid_server.customers.Contains(this))
                {
                    openid_server.customers.Add(this);
                }
                if (openid_server_id != openid_server.id)
                {
                    openid_server_id = openid_server.id;
                }
            }
            else if (!_settingFK)
            {
                openid_server_id = null;
            }
        }
    
        private void Fixupcustomer_pay_history(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (customer_pay_history item in e.NewItems)
                {
                    item.customer = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (customer_pay_history item in e.OldItems)
                {
                    if (ReferenceEquals(item.customer, this))
                    {
                        item.customer = null;
                    }
                }
            }
        }
    
        private void Fixupemail_history(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (email_history item in e.NewItems)
                {
                    item.customer = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (email_history item in e.OldItems)
                {
                    if (ReferenceEquals(item.customer, this))
                    {
                        item.customer = null;
                    }
                }
            }
        }
    
        private void Fixuplogin_history(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (login_history item in e.NewItems)
                {
                    item.customer = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (login_history item in e.OldItems)
                {
                    if (ReferenceEquals(item.customer, this))
                    {
                        item.customer = null;
                    }
                }
            }
        }
    
        private void Fixupordermasters(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ordermaster item in e.NewItems)
                {
                    item.customer = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ordermaster item in e.OldItems)
                {
                    if (ReferenceEquals(item.customer, this))
                    {
                        item.customer = null;
                    }
                }
            }
        }

        #endregion
    }
}
