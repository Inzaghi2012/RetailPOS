//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace RetailPOS.PersistenceLayer.Repository.Entities
{
    public partial class ordermaster : EntityBase
    {
        #region Primitive Properties
    
        public virtual long id
        {
            get;
            set;
        }
    
        public virtual string order_no
        {
            get;
            set;
        }
    
        public virtual System.DateTime order_date
        {
            get;
            set;
        }
    
        public virtual Nullable<int> customer_id
        {
            get;
            set;
        }
    
        public virtual string shop_code
        {
            get;
            set;
        }
    
        public virtual Nullable<long> invoice_id
        {
            get;
            set;
        }
    
        public virtual short print_receipt_copies
        {
            get;
            set;
        }
    
        public virtual Nullable<short> Status
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<orderchild> orderchilds
        {
            get
            {
                if (_orderchilds == null)
                {
                    var newCollection = new FixupCollection<orderchild>();
                    newCollection.CollectionChanged += Fixuporderchilds;
                    _orderchilds = newCollection;
                }
                return _orderchilds;
            }
            set
            {
                if (!ReferenceEquals(_orderchilds, value))
                {
                    var previousValue = _orderchilds as FixupCollection<orderchild>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixuporderchilds;
                    }
                    _orderchilds = value;
                    var newValue = value as FixupCollection<orderchild>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixuporderchilds;
                    }
                }
            }
        }
        private ICollection<orderchild> _orderchilds;

        #endregion
        #region Association Fixup
    
        private void Fixuporderchilds(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (orderchild item in e.NewItems)
                {
                    item.ordermaster = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (orderchild item in e.OldItems)
                {
                    if (ReferenceEquals(item.ordermaster, this))
                    {
                        item.ordermaster = null;
                    }
                }
            }
        }

        #endregion
    }
}
