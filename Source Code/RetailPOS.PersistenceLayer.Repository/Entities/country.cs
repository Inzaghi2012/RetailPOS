//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace RetailPOS.PersistenceLayer.Repository.Entities
{
    public partial class country : EntityBase
    {
        #region Primitive Properties
    
        public virtual short id
        {
            get;
            set;
        }
    
        public virtual string name
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<address> addresses
        {
            get
            {
                if (_addresses == null)
                {
                    var newCollection = new FixupCollection<address>();
                    newCollection.CollectionChanged += Fixupaddresses;
                    _addresses = newCollection;
                }
                return _addresses;
            }
            set
            {
                if (!ReferenceEquals(_addresses, value))
                {
                    var previousValue = _addresses as FixupCollection<address>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixupaddresses;
                    }
                    _addresses = value;
                    var newValue = value as FixupCollection<address>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixupaddresses;
                    }
                }
            }
        }
        private ICollection<address> _addresses;
    
        public virtual ICollection<town_city> town_city
        {
            get
            {
                if (_town_city == null)
                {
                    var newCollection = new FixupCollection<town_city>();
                    newCollection.CollectionChanged += Fixuptown_city;
                    _town_city = newCollection;
                }
                return _town_city;
            }
            set
            {
                if (!ReferenceEquals(_town_city, value))
                {
                    var previousValue = _town_city as FixupCollection<town_city>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixuptown_city;
                    }
                    _town_city = value;
                    var newValue = value as FixupCollection<town_city>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixuptown_city;
                    }
                }
            }
        }
        private ICollection<town_city> _town_city;

        #endregion
        #region Association Fixup
    
        private void Fixupaddresses(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (address item in e.NewItems)
                {
                    item.country = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (address item in e.OldItems)
                {
                    if (ReferenceEquals(item.country, this))
                    {
                        item.country = null;
                    }
                }
            }
        }
    
        private void Fixuptown_city(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (town_city item in e.NewItems)
                {
                    item.country = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (town_city item in e.OldItems)
                {
                    if (ReferenceEquals(item.country, this))
                    {
                        item.country = null;
                    }
                }
            }
        }

        #endregion
    }
}
