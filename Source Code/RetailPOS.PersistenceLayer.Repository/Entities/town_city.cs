//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace RetailPOS.PersistenceLayer.Repository.Entities
{
    public partial class town_city : EntityBase
    {
        #region Primitive Properties
    
        public virtual short id
        {
            get;
            set;
        }
    
        public virtual string town_city1
        {
            get;
            set;
        }
    
        public virtual short CountryID
        {
            get { return _countryID; }
            set
            {
                if (_countryID != value)
                {
                    if (country != null && country.id != value)
                    {
                        country = null;
                    }
                    _countryID = value;
                }
            }
        }
        private short _countryID;

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<address> addresses
        {
            get
            {
                if (_addresses == null)
                {
                    var newCollection = new FixupCollection<address>();
                    newCollection.CollectionChanged += Fixupaddresses;
                    _addresses = newCollection;
                }
                return _addresses;
            }
            set
            {
                if (!ReferenceEquals(_addresses, value))
                {
                    var previousValue = _addresses as FixupCollection<address>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixupaddresses;
                    }
                    _addresses = value;
                    var newValue = value as FixupCollection<address>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixupaddresses;
                    }
                }
            }
        }
        private ICollection<address> _addresses;
    
        public virtual country country
        {
            get { return _country; }
            set
            {
                if (!ReferenceEquals(_country, value))
                {
                    var previousValue = _country;
                    _country = value;
                    Fixupcountry(previousValue);
                }
            }
        }
        private country _country;
    
        public virtual ICollection<postcode> postcodes
        {
            get
            {
                if (_postcodes == null)
                {
                    var newCollection = new FixupCollection<postcode>();
                    newCollection.CollectionChanged += Fixuppostcodes;
                    _postcodes = newCollection;
                }
                return _postcodes;
            }
            set
            {
                if (!ReferenceEquals(_postcodes, value))
                {
                    var previousValue = _postcodes as FixupCollection<postcode>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixuppostcodes;
                    }
                    _postcodes = value;
                    var newValue = value as FixupCollection<postcode>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixuppostcodes;
                    }
                }
            }
        }
        private ICollection<postcode> _postcodes;

        #endregion
        #region Association Fixup
    
        private void Fixupcountry(country previousValue)
        {
            if (previousValue != null && previousValue.town_city.Contains(this))
            {
                previousValue.town_city.Remove(this);
            }
    
            if (country != null)
            {
                if (!country.town_city.Contains(this))
                {
                    country.town_city.Add(this);
                }
                if (CountryID != country.id)
                {
                    CountryID = country.id;
                }
            }
        }
    
        private void Fixupaddresses(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (address item in e.NewItems)
                {
                    item.town_city = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (address item in e.OldItems)
                {
                    if (ReferenceEquals(item.town_city, this))
                    {
                        item.town_city = null;
                    }
                }
            }
        }
    
        private void Fixuppostcodes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (postcode item in e.NewItems)
                {
                    item.town_city = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (postcode item in e.OldItems)
                {
                    if (ReferenceEquals(item.town_city, this))
                    {
                        item.town_city = null;
                    }
                }
            }
        }

        #endregion
    }
}
