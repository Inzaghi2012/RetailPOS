//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace RetailPOS.PersistenceLayer.Repository.Entities
{
    public partial class staff : EntityBase
    {
        #region Primitive Properties
    
        public virtual short id
        {
            get;
            set;
        }
    
        public virtual Nullable<int> UserId
        {
            get { return _userId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_userId != value)
                    {
                        if (user != null && user.Id != value)
                        {
                            user = null;
                        }
                        _userId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _userId;
    
        public virtual string code
        {
            get;
            set;
        }
    
        public virtual string last_name
        {
            get;
            set;
        }
    
        public virtual string first_name
        {
            get;
            set;
        }
    
        public virtual System.DateTime dateofbirth
        {
            get;
            set;
        }
    
        public virtual Nullable<short> designation_id
        {
            get;
            set;
        }
    
        public virtual string phone
        {
            get;
            set;
        }
    
        public virtual string mobile
        {
            get;
            set;
        }
    
        public virtual string email
        {
            get;
            set;
        }
    
        public virtual System.DateTime hire_date
        {
            get;
            set;
        }
    
        public virtual short status_id
        {
            get;
            set;
        }
    
        public virtual string image_path
        {
            get;
            set;
        }
    
        public virtual Nullable<short> department_id
        {
            get;
            set;
        }
    
        public virtual Nullable<long> address_id
        {
            get;
            set;
        }
    
        public virtual string openid_id
        {
            get;
            set;
        }
    
        public virtual Nullable<short> openid_server_id
        {
            get;
            set;
        }
    
        public virtual string password
        {
            get;
            set;
        }
    
        public virtual Nullable<short> security_group_id
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<email_history> email_history
        {
            get
            {
                if (_email_history == null)
                {
                    var newCollection = new FixupCollection<email_history>();
                    newCollection.CollectionChanged += Fixupemail_history;
                    _email_history = newCollection;
                }
                return _email_history;
            }
            set
            {
                if (!ReferenceEquals(_email_history, value))
                {
                    var previousValue = _email_history as FixupCollection<email_history>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixupemail_history;
                    }
                    _email_history = value;
                    var newValue = value as FixupCollection<email_history>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixupemail_history;
                    }
                }
            }
        }
        private ICollection<email_history> _email_history;
    
        public virtual ICollection<login_history> login_history
        {
            get
            {
                if (_login_history == null)
                {
                    var newCollection = new FixupCollection<login_history>();
                    newCollection.CollectionChanged += Fixuplogin_history;
                    _login_history = newCollection;
                }
                return _login_history;
            }
            set
            {
                if (!ReferenceEquals(_login_history, value))
                {
                    var previousValue = _login_history as FixupCollection<login_history>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixuplogin_history;
                    }
                    _login_history = value;
                    var newValue = value as FixupCollection<login_history>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixuplogin_history;
                    }
                }
            }
        }
        private ICollection<login_history> _login_history;
    
        public virtual user user
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user;
                    _user = value;
                    Fixupuser(previousValue);
                }
            }
        }
        private user _user;

        #endregion
        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void Fixupuser(user previousValue)
        {
            if (previousValue != null && previousValue.staffs.Contains(this))
            {
                previousValue.staffs.Remove(this);
            }
    
            if (user != null)
            {
                if (!user.staffs.Contains(this))
                {
                    user.staffs.Add(this);
                }
                if (UserId != user.Id)
                {
                    UserId = user.Id;
                }
            }
            else if (!_settingFK)
            {
                UserId = null;
            }
        }
    
        private void Fixupemail_history(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (email_history item in e.NewItems)
                {
                    item.staff = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (email_history item in e.OldItems)
                {
                    if (ReferenceEquals(item.staff, this))
                    {
                        item.staff = null;
                    }
                }
            }
        }
    
        private void Fixuplogin_history(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (login_history item in e.NewItems)
                {
                    item.staff = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (login_history item in e.OldItems)
                {
                    if (ReferenceEquals(item.staff, this))
                    {
                        item.staff = null;
                    }
                }
            }
        }

        #endregion
    }
}
